sysctlImage:
  enabled: true
  command: 
    - /bin/sh
    - -c
    - |-
      install_packages systemd procps
      sysctl -w net.core.somaxconn=10000
      echo never > /host-sys/kernel/mm/transparent_hugepage/enabled
  registry: docker.io
  repository: bitnami/minideb
  tag: latest
  pullPolicy: Always
  mountHostSys: true


## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName:

## Redis specific configuration options
redis:
  port: 0
  tlsPort: 6385
  tlsReplication: true
  config:
    min-replicas-to-write: 1
    # Value in seconds
    min-replicas-max-lag: 5
    maxmemory: 500mb
    #the volatile-lru service evicts the least recently used keys out of all keys with an "expire" field set
    maxmemory-policy: "volatile-lru" 
    save: 300 1
    stop-writes-on-bgsave-error: "no"
    rdbcompression: "yes"
    rdbchecksum: "yes"
    dbfilename: dump.rdb
    repl-diskless-sync: "no"

  resources:
     requests:
       memory: 500Mi
       cpu: 250m
     limits:
       memory: 1Gi
       cpu: 500m

## Sentinel specific configuration options
sentinel:
  port: 0
  tlsPort: 26385
  tlsReplication: true
  ## Configures sentinel with AUTH (requirepass params)
  auth: true
  password: password
  ## Use existing secret containing key `authKey` (ignores sentinel.password)
  #existingSecret: sentinel-secret
  ## Defines the key holding the sentinel password in existing secret.
  authKey: sentinel-password

  resources:
    requests:
      memory: 20Mi
      cpu: 50m
    limits:
      memory: 30Mi
      cpu: 100m

# Prometheus exporter specific configuration options
exporter:
  enabled: false #true
  image:  oliver006/redis_exporter #bitnami/redis-exporter
  tag: v0.31.0 #1.3.1-debian-9-r19
  
  sslEnabled: true

  # cpu/memory resource limits/requests
  resources:
    requests:
      memory: 20Mi
      cpu: 100m
    limits:
      memory: 50Mi
      cpu: 100m

## Configures redis with AUTH (requirepass & masterauth conf params)
auth: true
redisPassword: password

## Use existing secret containing key `authKey` (ignores redisPassword)
#existingSecret: redis-secret

## Defines the key holding the redis password in existing secret.
authKey: redis-password

persistentVolume:
  enabled: true
  ## redis-ha data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "default"
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  annotations: {}
  # reclaimPolicy per https://kubernetes.io/docs/concepts/storage/persistent-volumes/#reclaiming
  reclaimPolicy: ""
init:
  resources:
    requests:
      memory: 100Mi
      cpu: 100m
    limits:
      memory: 250Mi
      cpu: 250m